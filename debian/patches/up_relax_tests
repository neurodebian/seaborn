From: Yaroslav Halchenko <debian@onerussian.com>
Subject: on 32bit tests fail because of imho lacking some precision so should be safe to ignore

Last-Update: 2015-02-19

--- a/seaborn/tests/test_linearmodels.py
+++ b/seaborn/tests/test_linearmodels.py
@@ -281,7 +281,7 @@ class TestRegressionPlotter(object):
         x, y, ci = p.estimate_data
 
         npt.assert_array_equal(x, np.sort(np.unique(self.df.d)))
-        npt.assert_array_equal(y, self.df.groupby("d").y.mean())
+        npt.assert_array_almost_equal(y, self.df.groupby("d").y.mean())
         npt.assert_array_less(np.array(ci)[:, 0], y)
         npt.assert_array_less(y, np.array(ci)[:, 1])
 
@@ -564,7 +564,7 @@ class TestDiscretePlotter(object):
         npt.assert_array_equal(pos, [0, 1, 2])
 
         height_want = self.df.groupby("x").y.mean()
-        npt.assert_array_equal(height, height_want)
+        npt.assert_array_almost_equal(height, height_want)
 
         get_cis = lambda x: utils.ci(algo.bootstrap(x, random_seed=0), 95)
         ci_want = np.array(self.df.groupby("x").y.apply(get_cis).tolist())
@@ -580,7 +580,7 @@ class TestDiscretePlotter(object):
         npt.assert_array_equal(pos, [-.2, .8, 1.8])
 
         height_want = first_hue.groupby("x").y.mean()
-        npt.assert_array_equal(height, height_want)
+        npt.assert_array_almost_equal(height, height_want)
 
         ci_want = np.array(first_hue.groupby("x").y.apply(get_cis).tolist())
         npt.assert_array_almost_equal(np.squeeze(ci), ci_want, 1)
@@ -591,7 +591,7 @@ class TestDiscretePlotter(object):
         npt.assert_array_equal(pos, [.2, 1.2, 2.2])
 
         height_want = second_hue.groupby("x").y.mean()
-        npt.assert_array_equal(height, height_want)
+        npt.assert_array_almost_equal(height, height_want)
 
         ci_want = np.array(second_hue.groupby("x").y.apply(get_cis).tolist())
         npt.assert_array_almost_equal(np.squeeze(ci), ci_want, 1)
@@ -708,7 +708,7 @@ class TestDiscretePlots(object):
 
         x, y = ax.collections[0].get_offsets().T
         npt.assert_array_equal(x, np.arange(3))
-        npt.assert_array_equal(y, self.df.groupby("x").y.mean())
+        npt.assert_array_almost_equal(y, self.df.groupby("x").y.mean())
 
         f, ax = plt.subplots()
         lm.pointplot("x", "y", "g", data=self.df, join=False, ax=ax)
@@ -716,7 +716,7 @@ class TestDiscretePlots(object):
         x, y = ax.collections[0].get_offsets().T
         npt.assert_array_equal(x, np.arange(3))
         expected_y = self.df[self.df.g == "x"].groupby("x").y.mean()
-        npt.assert_array_equal(y, expected_y)
+        npt.assert_array_almost_equal(y, expected_y)
 
         plt.close("all")
 
